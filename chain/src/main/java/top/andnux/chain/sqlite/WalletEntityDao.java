package top.andnux.chain.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import top.andnux.chain.entity.WalletEntity.State;
import top.andnux.chain.entity.WalletEntity.StateConverter;

import top.andnux.chain.entity.WalletEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_wallet".
*/
public class WalletEntityDao extends AbstractDao<WalletEntity, Long> {

    public static final String TABLENAME = "tb_wallet";

    /**
     * Properties of entity WalletEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "user_id");
        public final static Property State = new Property(2, Integer.class, "state", false, "state");
        public final static Property Wallet_name = new Property(3, String.class, "wallet_name", false, "wallet_name");
        public final static Property Chain = new Property(4, String.class, "chain", false, "chain");
        public final static Property Address = new Property(5, String.class, "address", false, "address");
        public final static Property Keystore = new Property(6, String.class, "keystore", false, "keystore");
        public final static Property Private_key = new Property(7, String.class, "private_key", false, "private_key");
        public final static Property Public_key = new Property(8, String.class, "public_key", false, "public_key");
        public final static Property Mnemonic = new Property(9, String.class, "mnemonic", false, "mnemonic");
    }

    private final StateConverter stateConverter = new StateConverter();

    public WalletEntityDao(DaoConfig config) {
        super(config);
    }
    
    public WalletEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_wallet\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"user_id\" INTEGER," + // 1: user_id
                "\"state\" INTEGER," + // 2: state
                "\"wallet_name\" TEXT," + // 3: wallet_name
                "\"chain\" TEXT," + // 4: chain
                "\"address\" TEXT," + // 5: address
                "\"keystore\" TEXT," + // 6: keystore
                "\"private_key\" TEXT," + // 7: private_key
                "\"public_key\" TEXT," + // 8: public_key
                "\"mnemonic\" TEXT);"); // 9: mnemonic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_wallet\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WalletEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        State state = entity.getState();
        if (state != null) {
            stmt.bindLong(3, stateConverter.convertToDatabaseValue(state));
        }
 
        String wallet_name = entity.getWallet_name();
        if (wallet_name != null) {
            stmt.bindString(4, wallet_name);
        }
 
        String chain = entity.getChain();
        if (chain != null) {
            stmt.bindString(5, chain);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(7, keystore);
        }
 
        String private_key = entity.getPrivate_key();
        if (private_key != null) {
            stmt.bindString(8, private_key);
        }
 
        String public_key = entity.getPublic_key();
        if (public_key != null) {
            stmt.bindString(9, public_key);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(10, mnemonic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WalletEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        State state = entity.getState();
        if (state != null) {
            stmt.bindLong(3, stateConverter.convertToDatabaseValue(state));
        }
 
        String wallet_name = entity.getWallet_name();
        if (wallet_name != null) {
            stmt.bindString(4, wallet_name);
        }
 
        String chain = entity.getChain();
        if (chain != null) {
            stmt.bindString(5, chain);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(7, keystore);
        }
 
        String private_key = entity.getPrivate_key();
        if (private_key != null) {
            stmt.bindString(8, private_key);
        }
 
        String public_key = entity.getPublic_key();
        if (public_key != null) {
            stmt.bindString(9, public_key);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(10, mnemonic);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WalletEntity readEntity(Cursor cursor, int offset) {
        WalletEntity entity = new WalletEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : stateConverter.convertToEntityProperty(cursor.getInt(offset + 2)), // state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wallet_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // chain
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keystore
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // private_key
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // public_key
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // mnemonic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WalletEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setState(cursor.isNull(offset + 2) ? null : stateConverter.convertToEntityProperty(cursor.getInt(offset + 2)));
        entity.setWallet_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChain(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeystore(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrivate_key(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPublic_key(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMnemonic(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WalletEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WalletEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WalletEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
