package top.andnux.chain.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import top.andnux.chain.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_user".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "tb_user";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "phone");
        public final static Property Password = new Property(2, String.class, "password", false, "password");
        public final static Property State = new Property(3, int.class, "state", false, "state");
        public final static Property Env = new Property(4, String.class, "env", false, "env");
        public final static Property Is_current = new Property(5, boolean.class, "is_current", false, "is_current");
        public final static Property Create_time = new Property(6, java.util.Date.class, "create_time", false, "create_time");
        public final static Property Update_time = new Property(7, java.util.Date.class, "update_time", false, "update_time");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_user\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"phone\" TEXT," + // 1: phone
                "\"password\" TEXT," + // 2: password
                "\"state\" INTEGER NOT NULL ," + // 3: state
                "\"env\" TEXT," + // 4: env
                "\"is_current\" INTEGER NOT NULL ," + // 5: is_current
                "\"create_time\" INTEGER," + // 6: create_time
                "\"update_time\" INTEGER);"); // 7: update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
        stmt.bindLong(4, entity.getState());
 
        String env = entity.getEnv();
        if (env != null) {
            stmt.bindString(5, env);
        }
        stmt.bindLong(6, entity.getIs_current() ? 1L: 0L);
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(7, create_time.getTime());
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(8, update_time.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
        stmt.bindLong(4, entity.getState());
 
        String env = entity.getEnv();
        if (env != null) {
            stmt.bindString(5, env);
        }
        stmt.bindLong(6, entity.getIs_current() ? 1L: 0L);
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(7, create_time.getTime());
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(8, update_time.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.getInt(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // env
            cursor.getShort(offset + 5) != 0, // is_current
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // create_time
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // update_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
        entity.setEnv(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIs_current(cursor.getShort(offset + 5) != 0);
        entity.setCreate_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpdate_time(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
